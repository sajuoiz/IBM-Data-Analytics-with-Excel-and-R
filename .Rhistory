library('doBy')
siterange <-function(x){c(length(x), min(x), mean(x), max(x))}
summaryBy(Age~agecat, data=nyt1, FUN=siterange)
summaryBy(Gender+Signed_In+Impressions+Clicks~agecat,data=nyt1)
library(ggplot2)
ggplot(nyt1, aes(x=Impressions,fill=agecat))+geom_histogram(binwidth = 1)
ggplot(nyt1, aes(x=agecat,y=Impressions,fill=agecat))+geom_boxplot()
nyt1$hasimps <- cut(nyt1$Impressions, c(-Inf, 0, +Inf))
summaryBy(Clicks~hasimps, data = nyt1, FUN = siterange)
ggplot(subset(nyt1, Impressions>0), aes(x=Clicks/Impressions, colour=agecat)) + geom_density()
ggplot(subset(nyt1, Clicks>0), aes(x=Clicks/Impressions, colour = agecat))+ geom_density()
ggplot(subset(nyt1, Clicks>0), aes(x=agecat, y=Clicks, fill = agecat)) + geom_boxplot()
ggplot(subset(nyt1, Clicks>0), aes(x=Clicks, colour=agecat)) + geom_density()
ggplot(subset(nyt1, Clicks>0), aes(x=Clicks, colour=agecat)) + geom_density()
library(ggplot2)
library(doBy)
head(nyt1)
nyt1$agecat <- cut(nyt1$Age,c(-Inf,0,18,24,34,44,54,64,Inf))
summary(nyt1)
library('doBy')
siterange <-function(x){c(length(x), min(x), mean(x), max(x))}
summaryBy(Age~agecat, data=nyt1, FUN=siterange)
summaryBy(Gender+Signed_In+Impressions+Clicks~agecat,data=nyt1)
library(ggplot2)
ggplot(nyt1, aes(x=Impressions,fill=agecat))+geom_histogram(binwidth = 1)
ggplot(nyt1, aes(x=agecat,y=Impressions,fill=agecat))+geom_boxplot()
nyt1$hasimps <- cut(nyt1$Impressions, c(-Inf, 0, +Inf))
summaryBy(Clicks~hasimps, data = nyt1, FUN = siterange())
head(nyt1)
nyt1$agecat <- cut(nyt1$Age,c(-Inf,0,18,24,34,44,54,64,Inf))
summary(nyt1)
library('doBy')
siterange <-function(x){c(length(x), min(x), mean(x), max(x))}
summaryBy(Age~agecat, data=nyt1, FUN=siterange)
summaryBy(Gender+Signed_In+Impressions+Clicks~agecat,data=nyt1)
library(ggplot2)
ggplot(nyt1, aes(x=Impressions,fill=agecat))+geom_histogram(binwidth = 1)
ggplot(nyt1, aes(x=agecat,y=Impressions,fill=agecat))+geom_boxplot()
library(ggplot2)
ggplot(nyt1, aes(x=Impressions,fill=agecat))+geom_histogram(binwidth = 1)
ggplot(nyt1, aes(x=agecat,y=Impressions,fill=agecat))+geom_boxplot()
nyt1$hasimps <- cut(nyt1$Impressions, c(-Inf, 0, +Inf))
nyt1$hasimps <- cut(nyt1$Impressions, c(-Inf, 0, +Inf))
summaryBy(Clicks~hasimps, data = nyt1, FUN = siterange())
nyt1$hasimps <- cut(nyt1$Impressions, c(-Inf, 0, +Inf))
summaryBy(Clicks~hasimps, data = nyt1, FUN = siterange)
nyt1$hasimps <- cut(nyt1$Impressions, c(-Inf, 0, +Inf))
summaryBy(Clicks~hasimps, data = nyt1, FUN = siterange)
ggplot(subset(nyt1, Impressions>0), aes(x=Clicks/Impressions, colour=agecat)) + geom_density()
ggplot(subset(nyt1, Clicks>0), aes(x=Clicks/Impressions, colour = agecat)) + geom_density()
ggplot(subset(nyt1, Clicks>0), aes(x=agecat, y=Clicks, fill = agecat)) + geom_boxplot()
ggplot(subset(nyt1, Clicks>0), aes(x=Clicks, colour=agecat)) + geom_density()
help("geom_density")
ggplot(subset(nyt1, Impressions>0), aes(x=Clicks/Impressions, colour=agecat)) + geom_density()
ggplot(subset(nyt1, Clicks>0), aes(x=Clicks/Impressions, colour = agecat)) + geom_density()
library(ggplot2)
library(doBy)
head(nyt1)
nyt1$agecat <- cut(nyt1$Age,c(-Inf,0,18,24,34,44,54,64,Inf))
summary(nyt1)
library('doBy')
siterange <-function(x){c(length(x), min(x), mean(x), max(x))}
summaryBy(Age~agecat, data=nyt1, FUN=siterange)
summaryBy(Gender+Signed_In+Impressions+Clicks~agecat,data=nyt1)
library(ggplot2)
ggplot(nyt1, aes(x=Impressions,fill=agecat))+geom_histogram(binwidth = 1)
ggplot(nyt1, aes(x=agecat,y=Impressions,fill=agecat))+geom_boxplot()
nyt1$hasimps <- cut(nyt1$Impressions, c(-Inf, 0, +Inf))
summaryBy(Clicks~hasimps, data = nyt1, FUN = siterange)
ggplot(subset(nyt1, Impressions>0), aes(x=Clicks/Impressions, colour=agecat)) + geom_density()
ggplot(subset(nyt1, Clicks>0), aes(x=Clicks/Impressions, colour = agecat)) + geom_density()
ggplot(subset(nyt1, Clicks>0), aes(x=agecat, y=Clicks, fill = agecat)) + geom_boxplot()
ggplot(subset(nyt1, Clicks>0), aes(x=Clicks, colour=agecat)) + geom_density()
nyt1$scode[nyt1$Impressions==0] <- "NoImps"
nyt1$scode[nyt1$Impressions>0] <- "Imps"
nyt1$scode[nyt1$Clicks>0] <- "Clicks"
nyt1$scode <- factor(nyt1$scode)
head(nyt1)
nyt1$scode[nyt1$Impressions==0] <- "NoImps"
nyt1$scode[nyt1$Impressions>0] <- "Imps"
nyt1$scode[nyt1$Clicks>0] <- "Clicks"
head(nyt1)
nyt1$scode <- factor(nyt1$scode)
head(nyt1)
nyt1$scode[nyt1$Impressions==0] <- "NoImps"
nyt1$scode[nyt1$Impressions>0] <- "Imps"
nyt1$scode[nyt1$Clicks>0] <- "Clicks"
nyt1$scode <- factor(nyt1$scode)
head(nyt1)
clen <- function(x){c(length(x))}
etable <- summaryBy(Impressions~scode+Gener+agecat, data = nyt1, FUN=clen)
nyt1$scode[nyt1$Impressions==0] <- "NoImps"
nyt1$scode[nyt1$Impressions>0] <- "Imps"
nyt1$scode[nyt1$Clicks>0] <- "Clicks"
nyt1$scode <- factor(nyt1$scode)
head(nyt1)
clen <- function(x){c(length(x))}
etable <- summaryBy(Impressions~scode+Gener+agecat, data = nyt1, FUN=clen)
head(etable)
library(dplyr)
library(doBy)
library(ggplot2)
require(gdata)
bk <- read.xls('rollingsales_brooklyn.xls', pattern='BOROUGH')
library(plyr)
install.packages(plyr)
clear
cls
clr
detach("package:doBy", unload = TRUE)
library(doBy)
detach("package:doBy", unload = TRUE)
detach("package:dplyr", unload = TRUE)
bk <- read.xls('rollingsales_brooklyn.xls', pattern='BOROUGH')
library(readxl)
bk <- read_excel("C:/Users/samju/Downloads/dds_datasets/dds_ch2_rollingsales/rollingsales_brooklyn.xls",
skip = 4)
View(bk)
head(bk)
summary(bk)
bk <- read_excel("C:/Users/samju/Downloads/dds_datasets/dds_ch2_rollingsales/rollingsales_brooklyn.xls", skip = 4, pattern="BOROUGH")
install.packages(c('RSQLite'), repos = 'https://cran.rstudio.com',dependecies=TRUE)
library("RSQLite")
conn <- dbConnect(RSQLite::SQLite(),"FinalDB.sqlite")
#CROP_DATA:
df1 <- dbExecute(conn,
"CREATE TABLE CROP_DATA (
CD_ID INTEGER NOT NULL,
YEAR DATE NOT NULL,
CROP_TYPE VARCHAR(20) NOT NULL,
GEO VARCHAR(20) NOT NULL,
SEEDED_AREA INTEGER NOT NULL,
HARVESTED_AREA INTEGER NOT NULL,
PRODUCTION INTEGER NOT NULL,
AVG_YIELD INTEGER NOT NULL,
PRIMARY KEY (CD_ID)
)",
errors=FALSE
)
if (df1 == -1){
cat ("An error has occurred.\n")
msg <- odbcGetErrMsg(conn)
print (msg)
} else {
cat ("Table was created successfully.\n")
}
#FARM PRICES
df1 <- dbExecute(conn,
"CREATE TABLE FARM_PRICES (
DATE DATE NOT NULL,
CROP_TYPE VARCHAR(20) NOT NULL,
GEO VARCHAR (20) NOT NULL,
PRICE_PRERMT FLOAT(6),
CD_ID
)",
errors=FALSE
)
if (df1 == -1){
cat ("An error has occurred.\n")
msg <- odbcGetErrMsg(conn)
print (msg)
} else {
cat ("Table was created successfully.\n")
}
#CROP_DATA:
df1 <- dbExecute(conn,
"CREATE TABLE CROP_DATA (
CD_ID INTEGER NOT NULL,
YEAR DATE NOT NULL,
CROP_TYPE VARCHAR(20) NOT NULL,
GEO VARCHAR(20) NOT NULL,
SEEDED_AREA INTEGER NOT NULL,
HARVESTED_AREA INTEGER NOT NULL,
PRODUCTION INTEGER NOT NULL,
AVG_YIELD INTEGER NOT NULL,
PRIMARY KEY (CD_ID)
)",
errors=FALSE
)
#FARM PRICES
df2 <- dbExecute(conn,
"CREATE TABLE FARM_PRICES (
DATE DATE NOT NULL,
CROP_TYPE VARCHAR(20) NOT NULL,
GEO VARCHAR (20) NOT NULL,
PRICE_PRERMT FLOAT(6),
CD_ID
)",
errors=FALSE
)
install.packages(c('RSQLite'), repos = 'https://cran.rstudio.com',dependecies=TRUE)
library("RSQLite")
conn <- dbConnect(RSQLite::SQLite(),"FinalDB.sqlite")
clear
install.packages(c('RSQLite'), repos = 'https://cran.rstudio.com',dependecies=TRUE)
install.packages(c("RSQLite"), repos = "https://cran.rstudio.com", dependecies = TRUE)
library("RSQLite")
conn <- dbConnect(RSQLite::SQLite(),"FinalDB.sqlite")
#CROP_DATA:
df1 <- dbExecute(conn,
"CREATE TABLE CROP_DATA (
CD_ID INTEGER NOT NULL,
YEAR DATE NOT NULL,
CROP_TYPE VARCHAR(20) NOT NULL,
GEO VARCHAR(20) NOT NULL,
SEEDED_AREA INTEGER NOT NULL,
HARVESTED_AREA INTEGER NOT NULL,
PRODUCTION INTEGER NOT NULL,
AVG_YIELD INTEGER NOT NULL,
PRIMARY KEY (CD_ID)
)",
errors=FALSE
)
#FARM PRICES
df2 <- dbExecute(conn,
"CREATE TABLE FARM_PRICES (
DATE DATE NOT NULL,
CROP_TYPE VARCHAR(20) NOT NULL,
GEO VARCHAR (20) NOT NULL,
PRICE_PRERMT FLOAT(6),
CD_ID
)",
errors=FALSE
)
#DAILY_FX
df3 <- dbExecute(conn, "CREATE TABLE DAILY_FX (
DFX_ID INTEGER NOT NULL,
DATE DATE NOT NULL,
FXUSDCAD FLOAT(6),
PRIMARY KEY (DFX_ID)
)",
errors=FALSE
)
if (df3 == -1){
cat ("An error has occurred.\n")
msg <- odbcGetErrMsg(conn)
print (msg)
} else {
cat ("Table was created successfully.\n")
}
View(etable)
install.packages(c('RSQLite'), repos = 'https://cran.rstudio.com',dependecies=TRUE)
library("RSQLite")
conn <- dbConnect(RSQLite::SQLite(),"FinalDB.sqlite")
#CROP_DATA:
df1 <- dbExecute(conn,
"CREATE TABLE CROP_DATA (
CD_ID INTEGER NOT NULL,
YEAR DATE NOT NULL,
CROP_TYPE VARCHAR(20) NOT NULL,
GEO VARCHAR(20) NOT NULL,
SEEDED_AREA INTEGER NOT NULL,
HARVESTED_AREA INTEGER NOT NULL,
PRODUCTION INTEGER NOT NULL,
AVG_YIELD INTEGER NOT NULL,
PRIMARY KEY (CD_ID)
)",
errors=FALSE
)
#FARM PRICES
df2 <- dbExecute(conn,
"CREATE TABLE FARM_PRICES (
DATE DATE NOT NULL,
CROP_TYPE VARCHAR(20) NOT NULL,
GEO VARCHAR (20) NOT NULL,
PRICE_PRERMT FLOAT(6),
CD_ID
)",
errors=FALSE
)
#DAILY_FX
df3 <- dbExecute(conn, "CREATE TABLE DAILY_FX (
DFX_ID INTEGER NOT NULL,
DATE DATE NOT NULL,
FXUSDCAD FLOAT(6),
PRIMARY KEY (DFX_ID)
)",
errors=FALSE
)
#MONTHLY_FX
df4 <- dbExecute(conn, "CREATE TABLE DAILY_FX (
DATE DATE NOT NULL,
CROP_TYPE VARCHAR(20) NOT NULL,
GEO VARCHAR (20) NOT NULL,
PRICE_PRERMT FLOAT(6),
CD_ID
)",
errors=FALSE
)
dbListTables(conn)
#MONTHLY_FX
df4 <- dbExecute(conn, "CREATE TABLE MONTHLY_FX (
DATE DATE NOT NULL,
CROP_TYPE VARCHAR(20) NOT NULL,
GEO VARCHAR (20) NOT NULL,
PRICE_PRERMT FLOAT(6),
CD_ID
)",
errors=FALSE
)
if (df4 == -1){
cat ("An error has occurred.\n")
msg <- odbcGetErrMsg(conn)
print (msg)
} else {
cat ("Table was created successfully.\n")
}
dbListTables(conn)
crop_df <- read.csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-RP0203EN-SkillsNetwork/labs/Final%20Project/Annual_Crop_Data.csv', colClasses=c(YEAR="character"))
farm_df <- read.csv(' https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-RP0203EN-SkillsNetwork/labs/Final%20Project/Monthly_Farm_Prices.csv', colClasses=c(date="character"))
crop_df <- read.csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-RP0203EN-SkillsNetwork/labs/Final%20Project/Annual_Crop_Data.csv', colClasses=c(YEAR="character"))
farm_df <- read.csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-RP0203EN-SkillsNetwork/labs/Final%20Project/Monthly_Farm_Prices.csv', colClasses=c(date="character"))
daily_df <- read.csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-RP0203EN-SkillsNetwork/labs/Final%20Project/Daily_FX.csv', colClasses=c(date="character"))
monthly_df <- read.csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-RP0203EN-SkillsNetwork/labs/Final%20Project/Monthly_FX.csv', colClasses=c(date="character"))
head(crop_df)
head(farm_df)
head(daily_df)
head(monthly_df)
dbWriteTable(conn, "CROP_DATA", crop_df, overwrite=TRUE, header = TRUE)
dbWriteTable(conn, "FARM_PRICES", farm_df, overwrite=TRUE, header = TRUE)
dbWriteTable(conn, "DAILY_FX", daily_fx, overwrite=TRUE, header = TRUE)
dbWriteTable(conn, "DAILY_FX", daily_df, overwrite=TRUE, header = TRUE)
dbWriteTable(conn, "MONTHLY_FX", monthly_df, overwrite=TRUE, header = TRUE)
dbGetQuery(conn, 'SELECT COUNT(CD_ID) FROM CROP_DATA')
dbGetQuery(conn, 'SELECT DISTINCT(CROP_TYPE) FROM CROP_DATA')
dbGetQuery(conn, 'SELECT DISTINCT(GEO) FROM FARM_PRICES')
dbGetQuery(conn, 'SELECT HARVESTED_AREA FROM CROP_DATA WHERE CROP_TYPE== Rye AND GEO== Canada')
dbGetQuery(conn, 'SELECT HARVESTED_AREA FROM CROP_DATA WHERE CROP_TYPE=Rye AND GEO=Canada')
dbGetQuery(conn, 'SELECT HARVESTED_AREA FROM CROP_DATA WHERE CROP_TYPE='Rye' AND GEO='Canada'')
dbGetQuery(conn, 'SELECT HARVESTED_AREA FROM CROP_DATA WHERE CROP_TYPE=Rye')
dbGetQuery(conn, 'SELECT HARVESTED_AREA FROM CROP_DATA WHERE CROP_TYPE="Rye"')
dbGetQuery(conn, 'SELECT HARVESTED_AREA FROM CROP_DATA WHERE CROP_TYPE="Rye" AND GEO="Canada"')
dbGetQuery(conn, 'SELECT HARVESTED_AREA, YEAR FROM CROP_DATA WHERE CROP_TYPE="Rye" AND GEO="Canada"')
dbGetQuery(conn, 'SELECT HARVESTED_AREA, YEAR, CROP_TYPE FROM CROP_DATA WHERE CROP_TYPE="Rye" AND GEO="Canada" AND YEAR="1968-12-31"')
install.packages(c('RSQLite'), repos = 'https://cran.rstudio.com',dependecies=TRUE)
install.packages(c("RSQLite"), repos = "https://cran.rstudio.com", dependecies = TRUE)
install.packages(c("RSQLite"), repos = "https://cran.rstudio.com", dependecies = TRUE)
install.packages(c("RSQLite"), repos = "https://cran.rstudio.com", dependecies = TRUE)
library("RSQLite")
conn <- dbConnect(RSQLite::SQLite(),"FinalDB.sqlite")
dbGetQuery(conn, 'SELECT COUNT(CD_ID) FROM CROP_DATA')
dbGetQuery(conn, 'SELECT * FROM FARM_PRICES LIMIT 6')
dbGetQuery(conn, 'SELECT * FROM FARM_PRICES LIMIT 6 WHERE CROP_TYPE="Rye"')
dbGetQuery(conn, 'SELECT * FROM FARM_PRICES WHERE CROP_TYPE="Rye" LIMIT 6')
dbGetQuery(conn,'SELECT GEO, CROP_TYPE FROM FARM_PRICES WHERE CROP_TYPE="Barley"')
head(crop_df)
head(farm_df)
head(daily_df)
head(monthly_df)
dbGetQuery(conn, 'SELECT min(DATE) FIRST_DATE, max(DATE) LAST_DATE FROM FARM_PRICES')
dbGetQuery(conn, 'SELECT CROP_TYPE, PRICE_PRERMT FROM FARM_PRICES WHERE PRICE_PRERMT > 350')
dbGetQuery(conn, "SELECT strftime('%Y',YEAR) AS TOP_2000_YRS, GEO, HARVESTED_AREA FROM CROP_DATA WHERE YEAR='2000' AND GEO='Saskatchewan' ORDER BY AVG_YIELD DESC LIMIT 10")
dbGetQuery(conn, "SELECT strftime('%Y',YEAR) AS TOP_2000_YRS, GEO, HARVESTED_AREA FROM CROP_DATA WHERE GEO='Saskatchewan' ORDER BY AVG_YIELD DESC LIMIT 10")
dbGetQuery(conn, "SELECT strftime('%Y',YEAR) AS TOP_2000_YRS, GEO, AVG_YIELD FROM CROP_DATA WHERE GEO='Saskatchewan' ORDER BY AVG_YIELD DESC LIMIT 10")
dbGetQuery(conn, "SELECT strftime('%Y',YEAR) AS TOP_2000_YRS, GEO, AVG_YIELD FROM CROP_DATA WHERE GEO='Saskatchewan' ORDER BY AVG_YIELD DESC LIMIT 15")
dbGetQuery(conn, "SELECT strftime('%Y',YEAR) AS TOP_2000_YRS, GEO, AVG_YIELD FROM CROP_DATA WHERE TOP_2000_YRS=2000 AND GEO='Saskatchewan' ORDER BY AVG_YIELD DESC LIMIT 15")
dbGetQuery(conn, "SELECT strftime('%Y',YEAR) AS TOP_2000_YRS, GEO, AVG_YIELD FROM CROP_DATA WHERE TOP_2000_YRS='2000' AND GEO='Saskatchewan' ORDER BY AVG_YIELD DESC LIMIT 15")
dbGetQuery(conn, "SELECT strftime('%Y',YEAR) AS TOP_2000_YRS, GEO, AVG_YIELD FROM CROP_DATA WHERE TOP_2000_YRS='2000' ORDER BY AVG_YIELD DESC LIMIT 10")
dbGetQuery(conn, 'SELECT max(DATE) LAST_DATE, CROP_TYPE, HARVESTED_AREA, GEO FROM CROP_DATA WHERE GEO="Canada"')
dbGetQuery(conn, 'SELECT max(YEAR) LAST_DATE, CROP_TYPE, HARVESTED_AREA, GEO FROM CROP_DATA WHERE GEO="Canada"')
dbGetQuery(conn, "SELECT CD_ID,YEAR ,CROP_TYPE, GEO, SEEDED_AREA, HARVESTED_AREA, PRODUCTION, AVG_YIELD, FXUSDCAD
FROM CROP_DATA, DAILY_FX
WHERE strftime('%Y',CROP_DATA.YEAR) = strftime('%Y',DAILY_FX.DATE) and strftime('%m', CROP_DATA.YEAR) = strftime('%m', DAILY_FX.DATE) LIMIT 5")
dbGetQuery(conn, "SELECT CD_ID, DATE, CROP_TYPE, GEO, PRICE_PRERMT, FXUSDCAD
FROM FARM_PRICES, MONTHLY_FX
WHERE strftime('%Y',FARM_PRICES.DATE) = strftime('%Y',MONTHLY_FX.DATE) and strftime('%m', FARM_¨PRICES.DATE) = strftime('%m', MONTHLY_FX.DATE) LIMIT 5")
dbGetQuery(conn, "SELECT CD_ID, DATE, CROP_TYPE, GEO, PRICE_PRERMT, FXUSDCAD
FROM FARM_PRICES, MONTHLY_FX
WHERE strftime('%Y',FARM_PRICES.DATE) = strftime('%Y',MONTHLY_FX.DATE) and strftime('%m', FARM_PRICES.DATE) = strftime('%m', MONTHLY_FX.DATE) LIMIT 5")
dbGetQuery(conn, "SELECT FP.CD_ID, FP.DATE, FP.CROP_TYPE, FP.GEO, FP.PRICE_PRERMT, MF.FXUSDCAD
FROM FARM_PRICES AS PF, MONTHLY_FX AS MF
WHERE strftime('%Y',FP.DATE) = strftime('%Y',MF.DATE) and strftime('%m', FP.DATE) = strftime('%m', MF.DATE) LIMIT 5")
dbGetQuery(conn, "FROM FARM_PRICES AS PF, MONTHLY_FX AS MF SELECT FP.CD_ID, FP.DATE, FP.CROP_TYPE, FP.GEO, FP.PRICE_PRERMT, MF.FXUSDCAD
WHERE strftime('%Y',FP.DATE) = strftime('%Y',MF.DATE) and strftime('%m', FP.DATE) = strftime('%m', MF.DATE) LIMIT 5")
dbGetQuery(conn, "SELECT FP.CD_ID, FP.DATE, FP.CROP_TYPE, FP.GEO, FP.PRICE_PRERMT, FP.FXUSDCAD
FROM FARM_PRICES AS FP
INNER JOIN MONTHLY_FX AS MF ON strftime('%Y', FP.DATE) = strftime('%Y', MF.DATE)
AND strftime('%m', FP.DATE) = strftime('%m', MF.DATE)
LIMIT 5")
dbGetQuery(conn, "SELECT FP.CD_ID, FP.DATE, FP.CROP_TYPE, FP.GEO, FP.PRICE_PRERMT, MF.FXUSDCAD
FROM FARM_PRICES AS FP
INNER JOIN MONTHLY_FX AS MF ON strftime('%Y', FP.DATE) = strftime('%Y', MF.DATE)
AND strftime('%m', FP.DATE) = strftime('%m', MF.DATE)
df5 <- dbGetQuery(conn, "SELECT FP.CD_ID, FP.DATE, FP.CROP_TYPE, FP.GEO, FP.PRICE_PRERMT, MF.FXUSDCAD
dbGetQuery(conn, "SELECT FP.CD_ID, FP.DATE, FP.CROP_TYPE, FP.GEO, FP.PRICE_PRERMT, MF.FXUSDCAD
FROM FARM_PRICES AS FP
INNER JOIN MONTHLY_FX AS MF ON strftime('%Y', FP.DATE) = strftime('%Y', MF.DATE)
AND strftime('%m', FP.DATE) = strftime('%m', MF.DATE)
LIMIT 5")
dbGetQuery(conn, "SELECT FP.CD_ID, FP.DATE, FP.CROP_TYPE, FP.GEO, FP.PRICE_PRERMT, MF.FXUSDCAD
FROM FARM_PRICES AS FP
INNER JOIN MONTHLY_FX AS MF ON strftime('%Y', FP.DATE) = strftime('%Y', MF.DATE)
AND strftime('%m', FP.DATE) = strftime('%m', MF.DATE)
ORDER BY DATE DESC
LIMIT 6")
dbGetQuery(conn, "SELECT FP.CD_ID, FP.DATE, FP.CROP_TYPE, FP.GEO, FP.PRICE_PRERMT, MF.FXUSDCAD
FROM FARM_PRICES AS FP
INNER JOIN MONTHLY_FX AS MF ON strftime('%Y', FP.DATE) = strftime('%Y', MF.DATE)
AND strftime('%m', FP.DATE) = strftime('%m', MF.DATE)
ORDER BY FP.DATE DESC
LIMIT 6")
shiny::runApp('C:/Users/samju/OneDrive/Escritorio/shiny app Final Project/My-first-shiny')
runApp('C:/Users/samju/OneDrive/Escritorio/shiny app Final Project/My-first-shiny')
library(shiny)
library(ggplot2)
library(shiny)
library(tidyverse)
# Read in data
adult <- read_csv("adult.csv")
setwd("C:/Users/samju/OneDrive/Escritorio/shiny app Final Project")
library(shiny)
library(tidyverse)
adult <- read_csv("adult.csv")
library(shiny)
library(tidyverse)
# Read in data
adult <- read_csv("adult.csv")
# Convert column names to lowercase for convenience
names(adult) <- tolower(names(adult))
# Define server logic
shinyServer(function(input, output) {
df_country <- reactive({
adult %>% filter(native_country == input$country)
})
# TASK 5: Create logic to plot histogram or boxplot
output$p1 <- renderPlot({
if (input$graph_type == "histogram") {
# Histogram
ggplot(df_country(), aes_string(x = input$var_cont)) +
geom_histogram(bins = 30) +  # histogram geom
ggtitle("GRÁFICO") +
xlab("Variable") +
ylab("Frecuencia") +  # labels
facet_grid(~prediction)   # facet by prediction
}
else {
# Boxplot
ggplot(df_country(), aes_string(y = input$var_cont)) +
geom_boxplot() +  # boxplot geom
coord_flip() +  # flip coordinates
labs(x = "Variable", y = "Medición") +  # labels
facet_grid(~prediction)   # facet by prediction
}
})
# TASK 6: Create logic to plot faceted bar chart or stacked bar chart
output$p2 <- renderPlot({
# Bar chart
p <- ggplot(df_country(), aes_string(x = input$categorical_variables, fill = "prediction")) +
labs(title = "Gráfico de Barras", x = "Categoría") +  # labels
theme(
axis.text.x = element_text(angle = 45, hjust = 1),  # Ángulo y alineación del texto en el eje x
legend.position = "top"  # Posición de la leyenda
)    # modify theme to change text angle and legend position
if (input$is_stacked) {
p + geom_bar() # add bar geom and use prediction as fill
}
else{
p +
geom_bar() + # add bar geom and use input$categorical_variables as fill
facet_grid(~prediction)   # facet by prediction
}
})
})
library(shiny)
library(tidyverse)
# Application Layout
shinyUI(
fluidPage(
br(),
# TASK 1: Application title
titlePanel("My First Shiny App"),
p("Explore the difference between people who earn less than 50K and more than 50K. You can filter the data by country, then explore various demogrphic information."),
# TASK 2: Add first fluidRow to select input for country
fluidRow(
column(12,
wellPanel( selectInput("country", "Select Country", choices = unique(adult$native_country)) )  # add select input
)
),
# TASK 3: Add second fluidRow to control how to plot the continuous variables
fluidRow(
column(3,
wellPanel(
p("Select a continuous variable and graph type (histogram or boxplot) to view on the right."),
radioButtons("var_cont", "variable continua", choices =c("hours_per_week", "age")),   # add radio buttons for continuous variables
radioButtons("graph_type", "Tipo de gráfico", choices = c("histogram", "boxplot"))   # add radio buttons for chart type
)
),
column(9, plotOutput("p1") )  # add plot output
),
# TASK 4: Add third fluidRow to control how to plot the categorical variables
fluidRow(
column(3,
wellPanel(
p("Select a categorical variable to view bar chart on the right. Use the check box to view a stacked bar chart to combine the income levels into one graph. "),
radioButtons("categorical_variables", "variable categorica", choices =c("workclass", "education")),    # add radio buttons for categorical variables
checkboxInput("is_stacked", "barras apiladas", value = FALSE)     # add check box input for stacked bar chart option
)
),
column(9, plotOutput("p2"))  # add plot output
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
